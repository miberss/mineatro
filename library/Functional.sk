# This module provides utilities for working with functional programming concepts
# Includes several first-order functions for common operations
# Helpful for simplifying for loops, recursive patterns, and parser implementations
#
# This module requires the following other modules: NONE

using for loops
using script reflection

#> A shorthand for getting a function by its name
#> Defaults the script to none so it searches global functions if no script is provided
#>
#> @param name The name of the function to retrieve
#> @param script (Optional) The script where the function is defined
#> @return The function if found, none if not registered
function fn(name: string, script: string = {_}) :: function:
	return function named {_name} in (script {_script})

#> The id function returns the object given to it without any changes
#> Useful as a no-op function in functional pipelines or higher-order functions
#> Use `ids()` if you want multiple values
#>
#> @param value Any object
#> @return The object passed in
function id(value: object) :: object:
	return {_value}

#> The ids function returns the objects given to it without any changes
#> Useful as a no-op function in functional pipelines or higher-order functions
#> Use `id()` if you want a singular value
#>
#> @param value Any objects
#> @return The objects passed in
function ids(value: objects) :: objects:
	return {_value::*}

#> Applies a function to each item in a collection
#> Useful for transforming or performing actions on items in a list without using explicit for loops
#>
#> @param collection A collection of objects to process
#> @param transformer A function to run on each item in the collection
function foreach(collection: objects, transformer: function):
	for {_item} in {_collection::*}:
		run {_transformer} with args {_item}

#> Reduces a collection of values into a single value by applying a combiner function repeatedly
#> Starts with an initial value and combines each item in the collection sequentially
#>
#> @param collection A collection of values to reduce
#> @param initial_value The starting value for the reduction
#> @param combiner A function that takes two arguments: the current result and the next item, returning a new result
#> @return The final reduced value
function reduce(collection: objects, initial_value: object, combiner: function) :: object:
	set {_result} to {_initial_value}
	for {_item} in {_collection::*}:
		set {_result} to result of {_combiner} with args {_result}, {_item}
	return {_result}