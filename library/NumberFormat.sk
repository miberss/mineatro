# This module provides a system for formatting numbers into human-readable strings.
#
# This module requires the following other modules: NONE

using script reflection

import:
	java.text.DecimalFormat

#> Formats a large number into a human-readable string with suffixes.
#> 
#> @param number The numeric value to format.
#> @param format The formatting option, (small|big|full|scientific).
#> @return A formatted string representing the number with an appropriate suffix.
#> 
#>**small**:      
#>- 1234 → "1.23k"
#>- 1234567 → "1.23M"
#> 
#>**big**:
#>- 1234 → "1.23 Thousand"
#>- 1234567 → "1.23 Million"
#> 
#>**full**:       
#>- 1234 → 1,234 
#>- 1234567 → 1,234,567
#> 
#>**scientific**:
#>- 1234 → "1.23E3"
#>- 1234567 → "1.23E6"
function number_format(number: number, format: string = "small") :: string:
	if ({_number} < 1000):
		return "%{_number}%"

	else if {_format} is "scientific":
		return {-mib_lib::scientific}.format({_number})

	else if {_format} is "full":
		return formatNumber({_number})

	# Figure out the suffix tier by grouping digits in thousands
	# For non-mathers, treat log as like approximate count of how many digits there are
	# We divide / 3 to find out the tier because we want to get the index, and that is every 3 digits.
	set {_tier} to floor(log({_number}) / 3)
	set {_suffix} to {-mib_lib::suffixes::%{_format}%::%{_tier}%}

	# Scale number down to a value between 1 and 999.999...
	set {_scaled} to round({_number} / 10 ^ ({_tier} * 3), 2)

	# Add together
	if {_format} = "big":
		return "%{_scaled}% %{_suffix}%"
	return "%{_scaled}%%{_suffix}%"

#> Returns whether a string is a valid format 
#> 
#> @param format The format to compare
#> @return Returns true if it is a valid format.
function is_format_valid(format: string) :: boolean:
	return whether {_format} is any of all_formats()

#> Returns all valid formats of the number_format function
#> 
#> @return All the formats
function all_formats() :: strings:
	return ("small", "big", "scientific" and "full")

on script load:
	# Conway-Wechsler system of naming large numbers, used in Miner's Haven
	set {-mib_lib::suffixes::small::*} to "k M B T qd Qn sx Sp N O de Ud DD tdD qdD QnD sxD SpD OcD NvD Vgn UVg DVg TVg qtV QnV SeV SPG OVG NVG TGN UTG DTG tsTG qtTG QnTG ssTG SpTG OcTG NoTG QdDR uQDR dQDR tQDR qdQDR QnQDR sxQDR SpQDR OQDDr NQDDr qQGNT uQGNT dQGNT tQGNT qdQGNT QnQGNT sxQGNT SpQGNT OQQGNT NQQGNT SXGNTL USXGNTL DSXGNTL TSXGNTL QTSXGNTL QNSXGNTL SXSXGNTL SPSXGNTL OSXGNTL NVSXGNTL SPTGNTL USPTGNTL DSPTGNTL TSPTGNTL QTSPTGNTL QNSPTGNTL SXSPTGNTL SPSPTGNTL OSPTGNTL NVSPTGNTL OTGNTL UOTGNTL DOTGNTL TOTGNTL QTOTGNTL QNOTGNTL SXOTGNTL SPOTGNTL OTOTGNTL NVOTGNTL NONGNTL UNONGNTL DNONGNTL TNONGNTL QTNONGNTL QNNONGNTL SXNONGNTL SPNONGNTL OTNONGNTL NONONGNTL CENT UNCENT" split at " "
	set {-mib_lib::suffixes::big::*} to "Thousand Million Billion Trillion Quadrillion Quintilion Sextillion Septillion Octillion Nonillion Decillion Undecillion Duodecillion Tredecillion Quattuordecillion Quindecillion Sedecillion Septendecillion Octodecillion Novemdecillion Vigintillion Unvigintillion Duovigintillion Tresvigintillion Quattuorvigintillion Quinvigintillion Sesvigintillion Septemvigintillion Octovigintilion Novemvigintillion Trigintillion Untrigintillion Duotrigintillion Trestrigintillion Quattuortrigintillion Quintrigintillion Sestrigintillion Septentrigintillion Octotrigintillion Novemtrigintillion Quadragintillion Unquadragintillion Duoquadragintillion Tresquadragintillion Quattuorquadragintillion Quinquadragintillion Sesquadragintillion Septenquadragintillion Octoquadragintillion Novemquadragintillion Quinquagintillion Unquinquagintillion Duoquinquagintillion Tresquinquagintillion Quattuorquinquagintillion Quinquinquagintillion Sesquinquagintillion Septenquinquagintillion Octoquinquagintillion Novemquinquagintillion Sexagintillion Unsexagintillion Duosexagintillion Tresexagintillion Quattuorsexagintillion Quinsexagintillion Sesexagintillion Septensexagintillion Octosexagintillion Novemsexagintillion Septuagintillion Unseptuagintillion Duoseptuagintillion Treseptuagintillion Quattuorseptuagintillion Quinseptuagintillion Seseptuagintillion Septenseptuagintillion Octoseptuagintillion Novemseptuagintillion Octogintillion Unoctogintillion Duooctogintillion Treoctogintillion Quattuoroctogintillion Quinoctogintillion Sexoctogintillion Septemoctogintillion Octooctogintillion Novemoctogintillion Nonagintillion Unnonagintillion Duononagintillion Trenonagintillion Quattuornonagintillion Quinnonagintillion Senonagintillion Septenonagintillion Octononagintillion Novemnonagintillion Centillion Uncentillion" split at " "
	# Store decimal formatter
	set {-mib_lib::scientific} to new DecimalFormat("0.00E0")